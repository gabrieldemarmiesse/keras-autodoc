from keras_autodoc.autogen import DocumentationGenerator
from docs.autogen import keras_dir
from docs.autogen import add_np_implementation
from docs.structure import PAGES, EXCLUDE
from keras.layers import Input
import shutil
import os
import re

from pathlib import Path


class KerasDocumentationGenerator(DocumentationGenerator):

    def process_function_docstring(self, docstring, function):
        if ("keras.backend." in function.__module__
                and "{{np_implementation}}" in docstring):
            docstring = add_np_implementation(function, docstring)
        return super().process_function_docstring(docstring, function)

    def process_signature(self, signature):
        parts = re.split(r'\.(?!\d)', signature)
        if len(parts) >= 4:
            if parts[1] == 'layers':
                signature = 'keras.layers.' + '.'.join(parts[3:])
            if parts[1] == 'utils':
                signature = 'keras.utils.' + '.'.join(parts[3:])
            if parts[1] == 'backend':
                signature = 'keras.backend.' + '.'.join(parts[3:])
        signature = signature.replace('keras_applications', 'keras.applications')
        signature = signature.replace('keras_preprocessing', 'keras.preprocessing')
        return super().process_signature(signature)


def fix_keras_pages():
    for page in PAGES:
        if not page['page'] == 'layers/core.md':
            continue
        try:
            page['classes'].remove(Input)
        except ValueError:
            pass
        page['functions'] = [Input]


def make_keras_docs(dest_dir):

    fix_keras_pages()
    dest_dir = Path(dest_dir)
    template_dir = keras_dir / "docs" / "templates"

    keras_team_url = 'https://github.com/keras-team'
    project_url = {
        'keras': f'{keras_team_url}/keras/blob/master',
        'keras_applications': f'{keras_team_url}/keras-applications/blob/master',
        'keras_preprocessing': f'{keras_team_url}/keras-preprocessing/blob/master',
    }

    doc_generator = KerasDocumentationGenerator(PAGES,
                                                project_url,
                                                template_dir,
                                                keras_dir / "examples",
                                                EXCLUDE)
    doc_generator.generate(dest_dir)

    readme = (keras_dir / "README.md").read_text()
    index = (template_dir / "index.md").read_text()
    index = index.replace("{{autogenerated}}", readme[readme.find("##"):])
    (dest_dir / "index.md").write_text(index, encoding="utf-8")
    shutil.copyfile(keras_dir / "CONTRIBUTING.md", dest_dir / "contributing.md")


def test_docs_in_custom_destination_dir(tmpdir):
    make_keras_docs(tmpdir)
    tmpdir = Path(tmpdir)
    assert (tmpdir / "layers").is_dir()
    assert (tmpdir / "models").is_dir()
    assert (tmpdir / "examples").is_dir()
    assert "for easy and fast" in (tmpdir / "index.md").read_text()
    assert os.listdir(tmpdir / "examples")
    text = []
    for file_path in get_all_files(tmpdir):
        text.append(file_path.read_text())
    text = "\n".join(text)
    assert "keras_applications." not in text
    assert "keras_preprocessing." not in text
    assert "keras.layers.core" not in text
    assert "layers.pooling" not in text
    assert "utils.np_utils" not in text
    assert "backend.tensorflow_backend" not in text
    assert (
        "keras.layers.Dense(units, activation=None, use_bias=True, "
        "kernel_initializer='glorot_uniform', bias_initializer='zeros', "
        "kernel_regularizer=None, bias_regularizer=None, "
        "activity_regularizer=None, kernel_constraint=None, "
        "bias_constraint=None)"
    ) in text

    assert (
        '```python\n'
        '# as first layer in a sequential model:\n'
        'model = Sequential()\n'
        'model.add(Dense(32, input_shape=(16,)))\n'
        '# now the model will take as input arrays of shape (*, 16)\n'
        '# and output arrays of shape (*, 32)\n'
        '\n'
        '# after the first layer, you don\'t need to specify\n'
        '# the size of the input anymore:\n'
        'model.add(Dense(32))\n'
    ) in text
    assert "keras.layers.Dense" in text
    assert "__Numpy implementation__" in (tmpdir / 'backend.md').read_text()


def get_all_files(directory):
    for root, dirs, files in os.walk(directory):
        root = Path(root)
        for f in files:
            yield root / f
