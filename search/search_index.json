{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"keras-autodoc Autodoc for mkdocs . keras-autodoc will fetch the docstrings from the functions you wish to document and will insert them in the markdown files. Take a look at the documentation ! Install pip install keras-autodoc We recommend pinning the version (eg: pip install keras-autodoc==0.3.2 ). We may break compatibility without any warning. Example Let's suppose that you have a docs directory: ./docs |-- autogen.py |-- mkdocs.yml The API is quite simple: # content of docs/autogen.py from keras_autodoc import DocumentationGenerator pages = {'layers/core.md': ['keras.layers.Dense', 'keras.layers.Flatten'], 'callbacks.md': ['keras.callbacks.TensorBoard']} doc_generator = DocumentationGenerator(pages) doc_generator.generate('./sources') # content of docs/mkdocs.yml site_name: My_site docs_dir: sources site_description: 'My pretty site.' nav: - Core: layers/core.md - Callbacks: - Some callbacks: callbacks.md Call this Python code, then you just have to run: mkdocs serve and you'll be able to see your website at localhost:8000/callbacks . Docstring format: The docstrings used should use the The docstrings follow the Google Python Style Guide with markdown, or just plain markdown. For example, let's take this class: class ImageDataGenerator: \"\"\"Generate batches of tensor image data with real-time data augmentation. The data will be looped over (in batches). # Arguments featurewise_center: Boolean. Set input mean to 0 over the dataset, feature-wise. zca_whitening: Boolean. Apply ZCA whitening. width_shift_range: Float, 1-D array-like or int - float: fraction of total width, if < 1, or pixels if >= 1. - 1-D array-like: random elements from the array. - int: integer number of pixels from interval `(-width_shift_range, +width_shift_range)` - With `width_shift_range=2` possible values are integers `[-1, 0, +1]`, same as with `width_shift_range=[-1, 0, +1]`, while with `width_shift_range=1.0` possible values are floats in the interval `[-1.0, +1.0)`. # Examples Example of using `.flow(x, y)`: ```python datagen = ImageDataGenerator( featurewise_center=True, zca_whitening=True, width_shift_range=0.2) # compute quantities required for featurewise normalization # (std, mean, and principal components if ZCA whitening is applied) datagen.fit(x_train) # fits the model on batches with real-time data augmentation: model.fit_generator(datagen.flow(x_train, y_train, batch_size=32), steps_per_epoch=len(x_train) / 32, epochs=epochs) ``` \"\"\" def __init__(self,featurewise_center, zca_whitening, width_shift_range): pass will be rendered as: ImageDataGenerator class: dummy_module.ImageDataGenerator(featurewise_center, zca_whitening, width_shift_range=0.0) Generate batches of tensor image data with real-time data augmentation. The data will be looped over (in batches). Arguments featurewise_center : Boolean. Set input mean to 0 over the dataset, feature-wise. zca_whitening : Boolean. Apply ZCA whitening. width_shift_range : Float, 1-D array-like or int float: fraction of total width, if < 1, or pixels if >= 1. 1-D array-like: random elements from the array. int: integer number of pixels from interval (-width_shift_range, +width_shift_range) With width_shift_range=2 possible values are integers [-1, 0, +1] , same as with width_shift_range=[-1, 0, +1] , while with width_shift_range=1.0 possible values are floats in the interval [-1.0, +1.0) . Examples Example of using .flow(x, y) : datagen = ImageDataGenerator( featurewise_center=True, zca_whitening=True, width_shift_range=0.2) # compute quantities required for featurewise normalization # (std, mean, and principal components if ZCA whitening is applied) datagen.fit(x_train) # fits the model on batches with real-time data augmentation: model.fit_generator(datagen.flow(x_train, y_train, batch_size=32), steps_per_epoch=len(x_train) / 32, epochs=epochs) Take a look at our docs If you want examples, you can take a look at the docs directory of autokeras as well as the generated docs . You can also look at the docs directory of keras-tuner .","title":"Home"},{"location":"#keras-autodoc","text":"Autodoc for mkdocs . keras-autodoc will fetch the docstrings from the functions you wish to document and will insert them in the markdown files. Take a look at the documentation !","title":"keras-autodoc"},{"location":"#install","text":"pip install keras-autodoc We recommend pinning the version (eg: pip install keras-autodoc==0.3.2 ). We may break compatibility without any warning.","title":"Install"},{"location":"#example","text":"Let's suppose that you have a docs directory: ./docs |-- autogen.py |-- mkdocs.yml The API is quite simple: # content of docs/autogen.py from keras_autodoc import DocumentationGenerator pages = {'layers/core.md': ['keras.layers.Dense', 'keras.layers.Flatten'], 'callbacks.md': ['keras.callbacks.TensorBoard']} doc_generator = DocumentationGenerator(pages) doc_generator.generate('./sources') # content of docs/mkdocs.yml site_name: My_site docs_dir: sources site_description: 'My pretty site.' nav: - Core: layers/core.md - Callbacks: - Some callbacks: callbacks.md Call this Python code, then you just have to run: mkdocs serve and you'll be able to see your website at localhost:8000/callbacks .","title":"Example"},{"location":"#docstring-format","text":"The docstrings used should use the The docstrings follow the Google Python Style Guide with markdown, or just plain markdown. For example, let's take this class: class ImageDataGenerator: \"\"\"Generate batches of tensor image data with real-time data augmentation. The data will be looped over (in batches). # Arguments featurewise_center: Boolean. Set input mean to 0 over the dataset, feature-wise. zca_whitening: Boolean. Apply ZCA whitening. width_shift_range: Float, 1-D array-like or int - float: fraction of total width, if < 1, or pixels if >= 1. - 1-D array-like: random elements from the array. - int: integer number of pixels from interval `(-width_shift_range, +width_shift_range)` - With `width_shift_range=2` possible values are integers `[-1, 0, +1]`, same as with `width_shift_range=[-1, 0, +1]`, while with `width_shift_range=1.0` possible values are floats in the interval `[-1.0, +1.0)`. # Examples Example of using `.flow(x, y)`: ```python datagen = ImageDataGenerator( featurewise_center=True, zca_whitening=True, width_shift_range=0.2) # compute quantities required for featurewise normalization # (std, mean, and principal components if ZCA whitening is applied) datagen.fit(x_train) # fits the model on batches with real-time data augmentation: model.fit_generator(datagen.flow(x_train, y_train, batch_size=32), steps_per_epoch=len(x_train) / 32, epochs=epochs) ``` \"\"\" def __init__(self,featurewise_center, zca_whitening, width_shift_range): pass will be rendered as:","title":"Docstring format:"},{"location":"#imagedatagenerator-class","text":"dummy_module.ImageDataGenerator(featurewise_center, zca_whitening, width_shift_range=0.0) Generate batches of tensor image data with real-time data augmentation. The data will be looped over (in batches). Arguments featurewise_center : Boolean. Set input mean to 0 over the dataset, feature-wise. zca_whitening : Boolean. Apply ZCA whitening. width_shift_range : Float, 1-D array-like or int float: fraction of total width, if < 1, or pixels if >= 1. 1-D array-like: random elements from the array. int: integer number of pixels from interval (-width_shift_range, +width_shift_range) With width_shift_range=2 possible values are integers [-1, 0, +1] , same as with width_shift_range=[-1, 0, +1] , while with width_shift_range=1.0 possible values are floats in the interval [-1.0, +1.0) . Examples Example of using .flow(x, y) : datagen = ImageDataGenerator( featurewise_center=True, zca_whitening=True, width_shift_range=0.2) # compute quantities required for featurewise normalization # (std, mean, and principal components if ZCA whitening is applied) datagen.fit(x_train) # fits the model on batches with real-time data augmentation: model.fit_generator(datagen.flow(x_train, y_train, batch_size=32), steps_per_epoch=len(x_train) / 32, epochs=epochs)","title":"ImageDataGenerator class:"},{"location":"#take-a-look-at-our-docs","text":"If you want examples, you can take a look at the docs directory of autokeras as well as the generated docs . You can also look at the docs directory of keras-tuner .","title":"Take a look at our docs"},{"location":"automatic_gathering/","text":"[source] get_functions function keras_autodoc.get_functions(module, exclude: List[str] = None, return_strings: bool = True) Get all the functions of a module. Arguments module : The module to fetch the functions from. If it's a string, it should be in the dotted format. 'keras.backend' for example. exclude : The names which will be excluded from the returned list. For example, get_functions('keras.backend', exclude=['max']) . return_strings : If False, the actual functions will be returned. Note that if you use aliases when building your docs, you should use strings. This is because the computed signature uses __name__ and __module__ if you don't provide a string as input. Returns A list of strings or a list of functions. [source] get_classes function keras_autodoc.get_classes(module, exclude: List[str] = None, return_strings: bool = True) Get all the classes of a module. Arguments module : The module to fetch the classes from. If it's a string, it should be in the dotted format. 'keras.layers' for example. exclude : The names which will be excluded from the returned list. For example, get_classes('keras.layers', exclude=['Dense', 'Conv2D']) . return_strings : If False, the actual classes will be returned. Note that if you use aliases when building your docs, you should use strings. This is because the computed signature uses __name__ and __module__ if you don't provide a string as input. Returns A list of strings or a list of classes. [source] get_methods function keras_autodoc.get_methods(cls, exclude=None, return_strings=True) Get all the method of a class. Arguments cls : The class to fetch the methods from. If it's a string, it should be in the dotted format. 'keras.layers.Dense' for example. exclude : The names which will be excluded from the returned list. For example, get_methods('keras.Model', exclude=['save']) . return_strings : If False, the actual methods will be returned. Note that if you use aliases when building your docs, you should use strings. This is because the computed signature uses __name__ and __module__ if you don't provide a string as input. Returns A list of strings or a list of methods.","title":"Automatic gathering"},{"location":"automatic_gathering/#get_functions-function","text":"keras_autodoc.get_functions(module, exclude: List[str] = None, return_strings: bool = True) Get all the functions of a module. Arguments module : The module to fetch the functions from. If it's a string, it should be in the dotted format. 'keras.backend' for example. exclude : The names which will be excluded from the returned list. For example, get_functions('keras.backend', exclude=['max']) . return_strings : If False, the actual functions will be returned. Note that if you use aliases when building your docs, you should use strings. This is because the computed signature uses __name__ and __module__ if you don't provide a string as input. Returns A list of strings or a list of functions. [source]","title":"get_functions function"},{"location":"automatic_gathering/#get_classes-function","text":"keras_autodoc.get_classes(module, exclude: List[str] = None, return_strings: bool = True) Get all the classes of a module. Arguments module : The module to fetch the classes from. If it's a string, it should be in the dotted format. 'keras.layers' for example. exclude : The names which will be excluded from the returned list. For example, get_classes('keras.layers', exclude=['Dense', 'Conv2D']) . return_strings : If False, the actual classes will be returned. Note that if you use aliases when building your docs, you should use strings. This is because the computed signature uses __name__ and __module__ if you don't provide a string as input. Returns A list of strings or a list of classes. [source]","title":"get_classes function"},{"location":"automatic_gathering/#get_methods-function","text":"keras_autodoc.get_methods(cls, exclude=None, return_strings=True) Get all the method of a class. Arguments cls : The class to fetch the methods from. If it's a string, it should be in the dotted format. 'keras.layers.Dense' for example. exclude : The names which will be excluded from the returned list. For example, get_methods('keras.Model', exclude=['save']) . return_strings : If False, the actual methods will be returned. Note that if you use aliases when building your docs, you should use strings. This is because the computed signature uses __name__ and __module__ if you don't provide a string as input. Returns A list of strings or a list of methods.","title":"get_methods function"},{"location":"documentation_generator/","text":"[source] DocumentationGenerator class keras_autodoc.DocumentationGenerator( pages: Dict[str, list] = None, project_url: Union[str, Dict[str, str]] = None, template_dir=None, examples_dir=None, ) Generates the documentation. Arguments pages : A dictionary. The keys are the files' paths, the values are lists of strings, functions /classes / methods names with dotted access to the object. For example, pages = {'my_file.md': ['keras.layers.Dense']} is valid. project_url : The url pointing to the module directory of your project on GitHub. This will be used to make a [Sources] link. template_dir : Where to put the markdown files which will be copied and filled in the destination directory. You should put files like index.md inside. If you want a markdown file to be filled with the docstring of a function, use the {{autogenerated}} tag inside, and then add the markdown file to the pages dictionary. example_dir : Where you store examples in your project. Usually standalone files with a markdown docstring at the top. Will be inserted in the docs. [source] generate method DocumentationGenerator.generate(dest_dir) Generate the docs. Arguments dest_dir : Where to put the resulting markdown files.","title":"Documentation generator"},{"location":"documentation_generator/#documentationgenerator-class","text":"keras_autodoc.DocumentationGenerator( pages: Dict[str, list] = None, project_url: Union[str, Dict[str, str]] = None, template_dir=None, examples_dir=None, ) Generates the documentation. Arguments pages : A dictionary. The keys are the files' paths, the values are lists of strings, functions /classes / methods names with dotted access to the object. For example, pages = {'my_file.md': ['keras.layers.Dense']} is valid. project_url : The url pointing to the module directory of your project on GitHub. This will be used to make a [Sources] link. template_dir : Where to put the markdown files which will be copied and filled in the destination directory. You should put files like index.md inside. If you want a markdown file to be filled with the docstring of a function, use the {{autogenerated}} tag inside, and then add the markdown file to the pages dictionary. example_dir : Where you store examples in your project. Usually standalone files with a markdown docstring at the top. Will be inserted in the docs. [source]","title":"DocumentationGenerator class"},{"location":"documentation_generator/#generate-method","text":"DocumentationGenerator.generate(dest_dir) Generate the docs. Arguments dest_dir : Where to put the resulting markdown files.","title":"generate method"}]}